version: '3.7'

services:
  web:
    build: .
    depends_on:
      - db
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    restart: always
    networks:
      - web_net
    volumes:
      - .:/code/
    ports:
      - 8000:8000
    container_name: python_django_team14-web

  celery:
    restart: always
    build:
      context: .
    command: celery -A config worker -l INFO
    volumes:
      - .:/code/
    networks:
      - web_net
    depends_on:
      - redis
      - db
      - web
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    container_name: python_django_team14-celery

  celery-beat:
    restart: always
    build:
      context: .
    command: celery -A config beat -l info
    volumes:
      - .:/code/
    networks:
      - web_net
    depends_on:
      - redis
    container_name: python_django_team14-celery_beat

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    restart: always
    networks:
      - web_net
    ports:
      - $POSTGRES_PORT:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    container_name: python_django_team14-postgres_db
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
  redis:
    image: redis:alpine
    networks:
      - web_net
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    container_name: python_django_team14-redis_db

volumes:
  postgres_data:
  redis_data:

networks:
  web_net:
    name: web_net
    driver: bridge
